# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blossom', [dirname(__file__)])
        except ImportError:
            import _blossom
            return _blossom
        if fp is not None:
            try:
                _mod = imp.load_module('_blossom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blossom = swig_import_helper()
    del swig_import_helper
else:
    import _blossom
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _blossom.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self) -> "PyObject *" : return _blossom.SwigPyIterator_value(self)
    def incr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _blossom.SwigPyIterator_incr(self, n)
    def decr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _blossom.SwigPyIterator_decr(self, n)
    def distance(self, *args) -> "ptrdiff_t" : return _blossom.SwigPyIterator_distance(self, *args)
    def equal(self, *args) -> "bool" : return _blossom.SwigPyIterator_equal(self, *args)
    def copy(self) -> "swig::SwigPyIterator *" : return _blossom.SwigPyIterator_copy(self)
    def next(self) -> "PyObject *" : return _blossom.SwigPyIterator_next(self)
    def __next__(self) -> "PyObject *" : return _blossom.SwigPyIterator___next__(self)
    def previous(self) -> "PyObject *" : return _blossom.SwigPyIterator_previous(self)
    def advance(self, *args) -> "swig::SwigPyIterator *" : return _blossom.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args) -> "bool" : return _blossom.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args) -> "bool" : return _blossom.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args) -> "swig::SwigPyIterator &" : return _blossom.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args) -> "swig::SwigPyIterator &" : return _blossom.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args) -> "swig::SwigPyIterator *" : return _blossom.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args) -> "ptrdiff_t" : return _blossom.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _blossom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Example(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Example, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Example, name)
    __repr__ = _swig_repr
    __swig_setmethods__["features"] = _blossom.Example_features_set
    __swig_getmethods__["features"] = _blossom.Example_features_get
    if _newclass:features = _swig_property(_blossom.Example_features_get, _blossom.Example_features_set)
    __swig_setmethods__["target"] = _blossom.Example_target_set
    __swig_getmethods__["target"] = _blossom.Example_target_get
    if _newclass:target = _swig_property(_blossom.Example_target_get, _blossom.Example_target_set)
    def __init__(self, *args): 
        this = _blossom.new_Example(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blossom.delete_Example
    __del__ = lambda self : None;
Example_swigregister = _blossom.Example_swigregister
Example_swigregister(Example)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leaf"] = _blossom.Node_leaf_set
    __swig_getmethods__["leaf"] = _blossom.Node_leaf_get
    if _newclass:leaf = _swig_property(_blossom.Node_leaf_get, _blossom.Node_leaf_set)
    __swig_setmethods__["feat"] = _blossom.Node_feat_set
    __swig_getmethods__["feat"] = _blossom.Node_feat_get
    if _newclass:feat = _swig_property(_blossom.Node_feat_get, _blossom.Node_feat_set)
    def __init__(self): 
        this = _blossom.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blossom.delete_Node
    __del__ = lambda self : None;
Node_swigregister = _blossom.Node_swigregister
Node_swigregister(Node)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parent"] = _blossom.Edge_parent_set
    __swig_getmethods__["parent"] = _blossom.Edge_parent_get
    if _newclass:parent = _swig_property(_blossom.Edge_parent_get, _blossom.Edge_parent_set)
    __swig_setmethods__["child"] = _blossom.Edge_child_set
    __swig_getmethods__["child"] = _blossom.Edge_child_get
    if _newclass:child = _swig_property(_blossom.Edge_child_get, _blossom.Edge_child_set)
    __swig_setmethods__["val"] = _blossom.Edge_val_set
    __swig_getmethods__["val"] = _blossom.Edge_val_get
    if _newclass:val = _swig_property(_blossom.Edge_val_get, _blossom.Edge_val_set)
    def __init__(self): 
        this = _blossom.new_Edge()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blossom.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _blossom.Edge_swigregister
Edge_swigregister(Edge)

class Results(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Results, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Results, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nodes"] = _blossom.Results_nodes_set
    __swig_getmethods__["nodes"] = _blossom.Results_nodes_get
    if _newclass:nodes = _swig_property(_blossom.Results_nodes_get, _blossom.Results_nodes_set)
    __swig_setmethods__["edges"] = _blossom.Results_edges_set
    __swig_getmethods__["edges"] = _blossom.Results_edges_get
    if _newclass:edges = _swig_property(_blossom.Results_edges_get, _blossom.Results_edges_set)
    def __init__(self): 
        this = _blossom.new_Results()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blossom.delete_Results
    __del__ = lambda self : None;
Results_swigregister = _blossom.Results_swigregister
Results_swigregister(Results)


def search(*args) -> "Results" :
  return _blossom.search(*args)
search = _blossom.search
class node_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, node_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, node_vec, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _blossom.node_vec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _blossom.node_vec___nonzero__(self)
    def __bool__(self) -> "bool" : return _blossom.node_vec___bool__(self)
    def __len__(self) -> "std::vector< Node >::size_type" : return _blossom.node_vec___len__(self)
    def pop(self) -> "std::vector< Node >::value_type" : return _blossom.node_vec_pop(self)
    def __getslice__(self, *args) -> "std::vector< Node,std::allocator< Node > > *" : return _blossom.node_vec___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _blossom.node_vec___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _blossom.node_vec___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _blossom.node_vec___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< Node >::value_type const &" : return _blossom.node_vec___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _blossom.node_vec___setitem__(self, *args)
    def append(self, *args) -> "void" : return _blossom.node_vec_append(self, *args)
    def empty(self) -> "bool" : return _blossom.node_vec_empty(self)
    def size(self) -> "std::vector< Node >::size_type" : return _blossom.node_vec_size(self)
    def clear(self) -> "void" : return _blossom.node_vec_clear(self)
    def swap(self, *args) -> "void" : return _blossom.node_vec_swap(self, *args)
    def get_allocator(self) -> "std::vector< Node >::allocator_type" : return _blossom.node_vec_get_allocator(self)
    def begin(self) -> "std::vector< Node >::iterator" : return _blossom.node_vec_begin(self)
    def end(self) -> "std::vector< Node >::iterator" : return _blossom.node_vec_end(self)
    def rbegin(self) -> "std::vector< Node >::reverse_iterator" : return _blossom.node_vec_rbegin(self)
    def rend(self) -> "std::vector< Node >::reverse_iterator" : return _blossom.node_vec_rend(self)
    def pop_back(self) -> "void" : return _blossom.node_vec_pop_back(self)
    def erase(self, *args) -> "std::vector< Node >::iterator" : return _blossom.node_vec_erase(self, *args)
    def __init__(self, *args): 
        this = _blossom.new_node_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _blossom.node_vec_push_back(self, *args)
    def front(self) -> "std::vector< Node >::value_type const &" : return _blossom.node_vec_front(self)
    def back(self) -> "std::vector< Node >::value_type const &" : return _blossom.node_vec_back(self)
    def assign(self, *args) -> "void" : return _blossom.node_vec_assign(self, *args)
    def resize(self, *args) -> "void" : return _blossom.node_vec_resize(self, *args)
    def insert(self, *args) -> "void" : return _blossom.node_vec_insert(self, *args)
    def reserve(self, *args) -> "void" : return _blossom.node_vec_reserve(self, *args)
    def capacity(self) -> "std::vector< Node >::size_type" : return _blossom.node_vec_capacity(self)
    __swig_destroy__ = _blossom.delete_node_vec
    __del__ = lambda self : None;
node_vec_swigregister = _blossom.node_vec_swigregister
node_vec_swigregister(node_vec)

class edge_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edge_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edge_vec, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _blossom.edge_vec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _blossom.edge_vec___nonzero__(self)
    def __bool__(self) -> "bool" : return _blossom.edge_vec___bool__(self)
    def __len__(self) -> "std::vector< Edge >::size_type" : return _blossom.edge_vec___len__(self)
    def pop(self) -> "std::vector< Edge >::value_type" : return _blossom.edge_vec_pop(self)
    def __getslice__(self, *args) -> "std::vector< Edge,std::allocator< Edge > > *" : return _blossom.edge_vec___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _blossom.edge_vec___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _blossom.edge_vec___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _blossom.edge_vec___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< Edge >::value_type const &" : return _blossom.edge_vec___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _blossom.edge_vec___setitem__(self, *args)
    def append(self, *args) -> "void" : return _blossom.edge_vec_append(self, *args)
    def empty(self) -> "bool" : return _blossom.edge_vec_empty(self)
    def size(self) -> "std::vector< Edge >::size_type" : return _blossom.edge_vec_size(self)
    def clear(self) -> "void" : return _blossom.edge_vec_clear(self)
    def swap(self, *args) -> "void" : return _blossom.edge_vec_swap(self, *args)
    def get_allocator(self) -> "std::vector< Edge >::allocator_type" : return _blossom.edge_vec_get_allocator(self)
    def begin(self) -> "std::vector< Edge >::iterator" : return _blossom.edge_vec_begin(self)
    def end(self) -> "std::vector< Edge >::iterator" : return _blossom.edge_vec_end(self)
    def rbegin(self) -> "std::vector< Edge >::reverse_iterator" : return _blossom.edge_vec_rbegin(self)
    def rend(self) -> "std::vector< Edge >::reverse_iterator" : return _blossom.edge_vec_rend(self)
    def pop_back(self) -> "void" : return _blossom.edge_vec_pop_back(self)
    def erase(self, *args) -> "std::vector< Edge >::iterator" : return _blossom.edge_vec_erase(self, *args)
    def __init__(self, *args): 
        this = _blossom.new_edge_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _blossom.edge_vec_push_back(self, *args)
    def front(self) -> "std::vector< Edge >::value_type const &" : return _blossom.edge_vec_front(self)
    def back(self) -> "std::vector< Edge >::value_type const &" : return _blossom.edge_vec_back(self)
    def assign(self, *args) -> "void" : return _blossom.edge_vec_assign(self, *args)
    def resize(self, *args) -> "void" : return _blossom.edge_vec_resize(self, *args)
    def insert(self, *args) -> "void" : return _blossom.edge_vec_insert(self, *args)
    def reserve(self, *args) -> "void" : return _blossom.edge_vec_reserve(self, *args)
    def capacity(self) -> "std::vector< Edge >::size_type" : return _blossom.edge_vec_capacity(self)
    __swig_destroy__ = _blossom.delete_edge_vec
    __del__ = lambda self : None;
edge_vec_swigregister = _blossom.edge_vec_swigregister
edge_vec_swigregister(edge_vec)

class example_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, example_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, example_vec, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _blossom.example_vec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _blossom.example_vec___nonzero__(self)
    def __bool__(self) -> "bool" : return _blossom.example_vec___bool__(self)
    def __len__(self) -> "std::vector< Example >::size_type" : return _blossom.example_vec___len__(self)
    def pop(self) -> "std::vector< Example >::value_type" : return _blossom.example_vec_pop(self)
    def __getslice__(self, *args) -> "std::vector< Example,std::allocator< Example > > *" : return _blossom.example_vec___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _blossom.example_vec___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _blossom.example_vec___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _blossom.example_vec___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< Example >::value_type const &" : return _blossom.example_vec___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _blossom.example_vec___setitem__(self, *args)
    def append(self, *args) -> "void" : return _blossom.example_vec_append(self, *args)
    def empty(self) -> "bool" : return _blossom.example_vec_empty(self)
    def size(self) -> "std::vector< Example >::size_type" : return _blossom.example_vec_size(self)
    def clear(self) -> "void" : return _blossom.example_vec_clear(self)
    def swap(self, *args) -> "void" : return _blossom.example_vec_swap(self, *args)
    def get_allocator(self) -> "std::vector< Example >::allocator_type" : return _blossom.example_vec_get_allocator(self)
    def begin(self) -> "std::vector< Example >::iterator" : return _blossom.example_vec_begin(self)
    def end(self) -> "std::vector< Example >::iterator" : return _blossom.example_vec_end(self)
    def rbegin(self) -> "std::vector< Example >::reverse_iterator" : return _blossom.example_vec_rbegin(self)
    def rend(self) -> "std::vector< Example >::reverse_iterator" : return _blossom.example_vec_rend(self)
    def pop_back(self) -> "void" : return _blossom.example_vec_pop_back(self)
    def erase(self, *args) -> "std::vector< Example >::iterator" : return _blossom.example_vec_erase(self, *args)
    def __init__(self, *args): 
        this = _blossom.new_example_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _blossom.example_vec_push_back(self, *args)
    def front(self) -> "std::vector< Example >::value_type const &" : return _blossom.example_vec_front(self)
    def back(self) -> "std::vector< Example >::value_type const &" : return _blossom.example_vec_back(self)
    def assign(self, *args) -> "void" : return _blossom.example_vec_assign(self, *args)
    def resize(self, *args) -> "void" : return _blossom.example_vec_resize(self, *args)
    def insert(self, *args) -> "void" : return _blossom.example_vec_insert(self, *args)
    def reserve(self, *args) -> "void" : return _blossom.example_vec_reserve(self, *args)
    def capacity(self) -> "std::vector< Example >::size_type" : return _blossom.example_vec_capacity(self)
    __swig_destroy__ = _blossom.delete_example_vec
    __del__ = lambda self : None;
example_vec_swigregister = _blossom.example_vec_swigregister
example_vec_swigregister(example_vec)

class int_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int_vec, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _blossom.int_vec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _blossom.int_vec___nonzero__(self)
    def __bool__(self) -> "bool" : return _blossom.int_vec___bool__(self)
    def __len__(self) -> "std::vector< int >::size_type" : return _blossom.int_vec___len__(self)
    def pop(self) -> "std::vector< int >::value_type" : return _blossom.int_vec_pop(self)
    def __getslice__(self, *args) -> "std::vector< int,std::allocator< int > > *" : return _blossom.int_vec___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _blossom.int_vec___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _blossom.int_vec___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _blossom.int_vec___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< int >::value_type const &" : return _blossom.int_vec___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _blossom.int_vec___setitem__(self, *args)
    def append(self, *args) -> "void" : return _blossom.int_vec_append(self, *args)
    def empty(self) -> "bool" : return _blossom.int_vec_empty(self)
    def size(self) -> "std::vector< int >::size_type" : return _blossom.int_vec_size(self)
    def clear(self) -> "void" : return _blossom.int_vec_clear(self)
    def swap(self, *args) -> "void" : return _blossom.int_vec_swap(self, *args)
    def get_allocator(self) -> "std::vector< int >::allocator_type" : return _blossom.int_vec_get_allocator(self)
    def begin(self) -> "std::vector< int >::iterator" : return _blossom.int_vec_begin(self)
    def end(self) -> "std::vector< int >::iterator" : return _blossom.int_vec_end(self)
    def rbegin(self) -> "std::vector< int >::reverse_iterator" : return _blossom.int_vec_rbegin(self)
    def rend(self) -> "std::vector< int >::reverse_iterator" : return _blossom.int_vec_rend(self)
    def pop_back(self) -> "void" : return _blossom.int_vec_pop_back(self)
    def erase(self, *args) -> "std::vector< int >::iterator" : return _blossom.int_vec_erase(self, *args)
    def __init__(self, *args): 
        this = _blossom.new_int_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _blossom.int_vec_push_back(self, *args)
    def front(self) -> "std::vector< int >::value_type const &" : return _blossom.int_vec_front(self)
    def back(self) -> "std::vector< int >::value_type const &" : return _blossom.int_vec_back(self)
    def assign(self, *args) -> "void" : return _blossom.int_vec_assign(self, *args)
    def resize(self, *args) -> "void" : return _blossom.int_vec_resize(self, *args)
    def insert(self, *args) -> "void" : return _blossom.int_vec_insert(self, *args)
    def reserve(self, *args) -> "void" : return _blossom.int_vec_reserve(self, *args)
    def capacity(self) -> "std::vector< int >::size_type" : return _blossom.int_vec_capacity(self)
    __swig_destroy__ = _blossom.delete_int_vec
    __del__ = lambda self : None;
int_vec_swigregister = _blossom.int_vec_swigregister
int_vec_swigregister(int_vec)

class cstr_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cstr_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cstr_vec, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _blossom.cstr_vec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _blossom.cstr_vec___nonzero__(self)
    def __bool__(self) -> "bool" : return _blossom.cstr_vec___bool__(self)
    def __len__(self) -> "std::vector< char * >::size_type" : return _blossom.cstr_vec___len__(self)
    def pop(self) -> "std::vector< char * >::value_type" : return _blossom.cstr_vec_pop(self)
    def __getslice__(self, *args) -> "std::vector< char *,std::allocator< char * > > *" : return _blossom.cstr_vec___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _blossom.cstr_vec___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _blossom.cstr_vec___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _blossom.cstr_vec___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< char * >::value_type" : return _blossom.cstr_vec___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _blossom.cstr_vec___setitem__(self, *args)
    def append(self, *args) -> "void" : return _blossom.cstr_vec_append(self, *args)
    def empty(self) -> "bool" : return _blossom.cstr_vec_empty(self)
    def size(self) -> "std::vector< char * >::size_type" : return _blossom.cstr_vec_size(self)
    def clear(self) -> "void" : return _blossom.cstr_vec_clear(self)
    def swap(self, *args) -> "void" : return _blossom.cstr_vec_swap(self, *args)
    def get_allocator(self) -> "std::vector< char * >::allocator_type" : return _blossom.cstr_vec_get_allocator(self)
    def begin(self) -> "std::vector< char * >::iterator" : return _blossom.cstr_vec_begin(self)
    def end(self) -> "std::vector< char * >::iterator" : return _blossom.cstr_vec_end(self)
    def rbegin(self) -> "std::vector< char * >::reverse_iterator" : return _blossom.cstr_vec_rbegin(self)
    def rend(self) -> "std::vector< char * >::reverse_iterator" : return _blossom.cstr_vec_rend(self)
    def pop_back(self) -> "void" : return _blossom.cstr_vec_pop_back(self)
    def erase(self, *args) -> "std::vector< char * >::iterator" : return _blossom.cstr_vec_erase(self, *args)
    def __init__(self, *args): 
        this = _blossom.new_cstr_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _blossom.cstr_vec_push_back(self, *args)
    def front(self) -> "std::vector< char * >::value_type" : return _blossom.cstr_vec_front(self)
    def back(self) -> "std::vector< char * >::value_type" : return _blossom.cstr_vec_back(self)
    def assign(self, *args) -> "void" : return _blossom.cstr_vec_assign(self, *args)
    def resize(self, *args) -> "void" : return _blossom.cstr_vec_resize(self, *args)
    def insert(self, *args) -> "void" : return _blossom.cstr_vec_insert(self, *args)
    def reserve(self, *args) -> "void" : return _blossom.cstr_vec_reserve(self, *args)
    def capacity(self) -> "std::vector< char * >::size_type" : return _blossom.cstr_vec_capacity(self)
    __swig_destroy__ = _blossom.delete_cstr_vec
    __del__ = lambda self : None;
cstr_vec_swigregister = _blossom.cstr_vec_swigregister
cstr_vec_swigregister(cstr_vec)

class str_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, str_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, str_vec, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _blossom.str_vec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _blossom.str_vec___nonzero__(self)
    def __bool__(self) -> "bool" : return _blossom.str_vec___bool__(self)
    def __len__(self) -> "std::vector< std::string >::size_type" : return _blossom.str_vec___len__(self)
    def pop(self) -> "std::vector< std::string >::value_type" : return _blossom.str_vec_pop(self)
    def __getslice__(self, *args) -> "std::vector< std::string,std::allocator< std::string > > *" : return _blossom.str_vec___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _blossom.str_vec___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _blossom.str_vec___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _blossom.str_vec___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &" : return _blossom.str_vec___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _blossom.str_vec___setitem__(self, *args)
    def append(self, *args) -> "void" : return _blossom.str_vec_append(self, *args)
    def empty(self) -> "bool" : return _blossom.str_vec_empty(self)
    def size(self) -> "std::vector< std::string >::size_type" : return _blossom.str_vec_size(self)
    def clear(self) -> "void" : return _blossom.str_vec_clear(self)
    def swap(self, *args) -> "void" : return _blossom.str_vec_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::string >::allocator_type" : return _blossom.str_vec_get_allocator(self)
    def begin(self) -> "std::vector< std::string >::iterator" : return _blossom.str_vec_begin(self)
    def end(self) -> "std::vector< std::string >::iterator" : return _blossom.str_vec_end(self)
    def rbegin(self) -> "std::vector< std::string >::reverse_iterator" : return _blossom.str_vec_rbegin(self)
    def rend(self) -> "std::vector< std::string >::reverse_iterator" : return _blossom.str_vec_rend(self)
    def pop_back(self) -> "void" : return _blossom.str_vec_pop_back(self)
    def erase(self, *args) -> "std::vector< std::string >::iterator" : return _blossom.str_vec_erase(self, *args)
    def __init__(self, *args): 
        this = _blossom.new_str_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _blossom.str_vec_push_back(self, *args)
    def front(self) -> "std::vector< std::string >::value_type const &" : return _blossom.str_vec_front(self)
    def back(self) -> "std::vector< std::string >::value_type const &" : return _blossom.str_vec_back(self)
    def assign(self, *args) -> "void" : return _blossom.str_vec_assign(self, *args)
    def resize(self, *args) -> "void" : return _blossom.str_vec_resize(self, *args)
    def insert(self, *args) -> "void" : return _blossom.str_vec_insert(self, *args)
    def reserve(self, *args) -> "void" : return _blossom.str_vec_reserve(self, *args)
    def capacity(self) -> "std::vector< std::string >::size_type" : return _blossom.str_vec_capacity(self)
    __swig_destroy__ = _blossom.delete_str_vec
    __del__ = lambda self : None;
str_vec_swigregister = _blossom.str_vec_swigregister
str_vec_swigregister(str_vec)

# This file is compatible with both classic and new-style classes.



#!/usr/bin/env python
#-*- coding:utf-8 -*-
##
## rcnf.py
##
##  Created on: Aug 18, 2012
##      Author: Alexey S. Ignatiev
##      E-mail: aign@sat.inesc-id.pt
##

#
#==============================================================================
import getopt
import os
import random
import sys


#
#==============================================================================
def generate_clauses(cfreq, lnum, vnum, max_w):
    """
        Generates clauses with current parameters.
    """

    # generating clauses
    clauses = set()
    cl = set()

    v_arr = range(1, vnum + 1)
    random.shuffle(v_arr)
    j = 0

    for i in xrange(lnum):
        cl.add(v_arr[j] if random.random() < 0.5 else -v_arr[j])
        j += 1

        if random.random() < cfreq or j == len(v_arr):
            clauses.add(frozenset(cl))
            cl.clear()

            random.shuffle(v_arr)
            j = 0
    else:
        if len(cl) > 0:
            clauses.add(frozenset(cl))

    # generating weights
    weights = []
    if max_w > 1:
        for cl in clauses:
            weights.append(random.randint(1, max_w))

    top_w = sum(weights)
    if top_w == len(weights):
        top_w = None
    else:
        top_w += 1

    return clauses, weights, top_w


#
#==============================================================================
def write_preamble(ofp, nvar, ncl, top_w):
    """
        Prints standard DIMACS preamble.
    """

    ofp.write('c generated by command \'{0}\'\n\n'.format(' '.join(sys.argv)))

    if not top_w:
        ofp.write('p cnf {0} {1}\n'.format(nvar, ncl))
    else:
        ofp.write('p wcnf {0} {1} {2}\n'.format(nvar, ncl, top_w))


#
#==============================================================================
def write_clauses(ofp, clauses, wghts, top_w):
    """
        Prints a CNF to a file in DIMACS format.
    """

    if top_w:
        for cl, w in zip(clauses, wghts):
            ofp.write('{0} {1} 0\n'.format(w, ' '.join([str(l) for l in cl])))
    else:
        for cl in clauses:
            ofp.write('{0} 0\n'.format(' '.join([str(l) for l in cl])))


#
#==============================================================================
def parse_options():
    """
        Parses command-line options:
    """

    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   'f:hn:o:s:v:w:',
                                   ['cfreq=',
                                    'help',
                                    'nfiles=',
                                    'ofname=',
                                    'szlim=',
                                    'nvars=',
                                    'max-wght='])
    except getopt.GetoptError, err:
        sys.stderr.write(str(err).capitalize())
        usage()
        sys.exit(1)

    cfreq = 0.5
    fnum = 1
    outn = 'rnd'
    lnum = 20
    vnum = 4
    max_w = 1

    for opt, arg in opts:
        if opt in ('-f', '--cfreq'):
            cfreq = float(arg)
        elif opt in ('-h', '--help'):
            usage()
            sys.exit(0)
        elif opt in ('-n', '--nfiles'):
            fnum = int(arg)
        elif opt in ('-o', '--ofname'):
            outn = str(arg)
        elif opt in ('-s', '--szlim'):
            lnum = int(arg)
        elif opt in ('-v', '--nvars'):
            vnum = int(arg)
        elif opt in ('-w', '--max-wght'):
            max_w = int(arg)
        else:
            assert False, 'Unhandled option: {0} {1}'.format(opt.strip(), arg.strip())

    return cfreq, fnum, outn, lnum, vnum, max_w


#
#==============================================================================
def usage():
    """
        Print usage message.
    """

    print 'Usage:', os.path.basename(sys.argv[0]), '[options]'
    print 'Options:'
    print '\t-f, --cfreq       New clause frequency'
    print '\t-h, --help'
    print '\t-n, --nfiles      Number of files'
    print '\t-o, --ofname      Output filename'
    print '\t-s, --szlim       Total size limit'
    print '\t-v, --nvars       Number of variables'
    print '\t-w, --max-wght    Generate weigthed instances (if max_w > 1)'


#
#==============================================================================
if __name__ == '__main__':
    cfreq, fnum, outn, lnum, vnum, max_w = parse_options()

    path = os.path.dirname(os.path.abspath(outn))
    if not os.path.exists(path):
        os.makedirs(path)

    random.seed()
    llen = len(str(fnum + 1))
    for i in xrange(1, fnum + 1):
        clauses, wghts, top_w = generate_clauses(cfreq, lnum, vnum, max_w)

        clen = len(str(i))
        fname = '{0}_{1}{2}.{3}cnf'.format(outn, '0' * (llen - clen), i, 'w' if top_w else '')
        with open(fname, 'w') as ofp:
            write_preamble(ofp, vnum, len(clauses), top_w)
            write_clauses(ofp, clauses, wghts, top_w)
